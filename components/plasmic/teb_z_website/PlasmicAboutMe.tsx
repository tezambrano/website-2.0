// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8heT1pgrgbecLEwTnEku1h
// Component: oBJloYNkRcSn

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import MyNavBar from "../../MyNavBar"; // plasmic-import: QL_neZ3AzYAD/component

import { useScreenVariants as useScreenVariantsokBisxNOk3Yo } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: OkBisxNOk3Yo/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 8heT1pgrgbecLEwTnEku1h/projectcss
import sty from "./PlasmicAboutMe.module.css"; // plasmic-import: oBJloYNkRcSn/css

createPlasmicElementProxy;

export type PlasmicAboutMe__VariantMembers = {};
export type PlasmicAboutMe__VariantsArgs = {};
type VariantPropType = keyof PlasmicAboutMe__VariantsArgs;
export const PlasmicAboutMe__VariantProps = new Array<VariantPropType>();

export type PlasmicAboutMe__ArgsType = {};
type ArgPropType = keyof PlasmicAboutMe__ArgsType;
export const PlasmicAboutMe__ArgProps = new Array<ArgPropType>();

export type PlasmicAboutMe__OverridesType = {
  root?: Flex__<"div">;
  myNavBar?: Flex__<typeof MyNavBar>;
};

export interface DefaultAboutMeProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAboutMe__RenderFunc(props: {
  variants: PlasmicAboutMe__VariantsArgs;
  args: PlasmicAboutMe__ArgsType;
  overrides: PlasmicAboutMe__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsokBisxNOk3Yo()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <MyNavBar
            data-plasmic-name={"myNavBar"}
            data-plasmic-override={overrides.myNavBar}
            className={classNames("__wab_instance", sty.myNavBar)}
          />

          <section className={classNames(projectcss.all, sty.section__yIe6V)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xc5Df
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token-N9fFTRfh-71N)" }}
                >
                  {"About Me"}
                </span>
              </React.Fragment>
            </div>
          </section>
          <section className={classNames(projectcss.all, sty.section___49Xjg)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__mkwYf)}
            >
              <div className={classNames(projectcss.all, sty.column__rv7EX)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9WLki
                  )}
                >
                  {'"TebZ"'}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___585TO
                  )}
                >
                  {
                    "I go for many names, but the most common one is \u201cTebZ\u201d. I\u2019m a college student with an avid passion to create and discover new worlds inside me, for as long as I can remember, I\u2019ve taken the phrase \u201cWhere fiction meets reality\u201d very seriously."
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__ybeVo)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__l7SV9
                  )}
                >
                  {"What do I do?"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wyF7
                  )}
                >
                  {
                    "Since creating is my focus, I\u2019ve spent all of my life learning about new ways to bring my imagination to life, as such, I\u2019m now known as a graphic designer, game developer and designer, artist, video editor, comic producer, and what this whole website is about, writer."
                  }
                </div>
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__zKrnu)}
            >
              <div className={classNames(projectcss.all, sty.column__v6Qes)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0Xpfu
                  )}
                >
                  {"What do I write about?"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__d53V
                  )}
                >
                  {
                    "I write about everything I can think of, from poems to anecdotes I\u2019ve lived, you can find a collection of constantly updated stories here. (Are you perhaps interested in other types of content? contact me)"
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__zT2Om)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mnYvq
                  )}
                >
                  {"What is this blog about?"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7S3Td
                  )}
                >
                  {
                    "In this blog, you\u2019ll be able to read constantly updated stories, anecdotes and poems I come up with."
                  }
                </div>
              </div>
            </Stack__>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "myNavBar"],
  myNavBar: ["myNavBar"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  myNavBar: typeof MyNavBar;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAboutMe__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAboutMe__VariantsArgs;
    args?: PlasmicAboutMe__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAboutMe__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAboutMe__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAboutMe__ArgProps,
          internalVariantPropNames: PlasmicAboutMe__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAboutMe__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAboutMe";
  } else {
    func.displayName = `PlasmicAboutMe.${nodeName}`;
  }
  return func;
}

export const PlasmicAboutMe = Object.assign(
  // Top-level PlasmicAboutMe renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    myNavBar: makeNodeComponent("myNavBar"),

    // Metadata about props expected for PlasmicAboutMe
    internalVariantProps: PlasmicAboutMe__VariantProps,
    internalArgProps: PlasmicAboutMe__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAboutMe;
/* prettier-ignore-end */
