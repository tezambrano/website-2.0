// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8heT1pgrgbecLEwTnEku1h
// Component: r2jtQDgh7Bzu

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import MyNavBar from "../../MyNavBar"; // plasmic-import: QL_neZ3AzYAD/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import { AntdBreadcrumb } from "@plasmicpkgs/antd5/skinny/registerBreadcrumb";
import { AntdBreadcrumbItem } from "@plasmicpkgs/antd5/skinny/registerBreadcrumb";
import { CmsRowField } from "@plasmicpkgs/plasmic-cms";
import Tooltip from "../../Tooltip"; // plasmic-import: RazGL-xQpwmp/component
import IconButton from "../../IconButton"; // plasmic-import: lV36Sn5MvzOt/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 8heT1pgrgbecLEwTnEku1h/projectcss
import sty from "./PlasmicStory.module.css"; // plasmic-import: r2jtQDgh7Bzu/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: haKLuWbvNTf0/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: oPxkYH2W_6f2/icon

createPlasmicElementProxy;

export type PlasmicStory__VariantMembers = {};
export type PlasmicStory__VariantsArgs = {};
type VariantPropType = keyof PlasmicStory__VariantsArgs;
export const PlasmicStory__VariantProps = new Array<VariantPropType>();

export type PlasmicStory__ArgsType = {};
type ArgPropType = keyof PlasmicStory__ArgsType;
export const PlasmicStory__ArgProps = new Array<ArgPropType>();

export type PlasmicStory__OverridesType = {
  root?: Flex__<"div">;
  myNavBar?: Flex__<typeof MyNavBar>;
  modal?: Flex__<typeof AntdModal>;
  form?: Flex__<typeof FormWrapper>;
  formField?: Flex__<typeof FormItemWrapper>;
  input?: Flex__<typeof AntdInput>;
  cmsDataFetcher?: Flex__<typeof CmsQueryRepeater>;
  breadcrumb?: Flex__<typeof AntdBreadcrumb>;
  tooltip?: Flex__<typeof Tooltip>;
  iconButton?: Flex__<typeof IconButton>;
};

export interface DefaultStoryProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicStory__RenderFunc(props: {
  variants: PlasmicStory__VariantsArgs;
  args: PlasmicStory__ArgsType;
  overrides: PlasmicStory__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <MyNavBar
            data-plasmic-name={"myNavBar"}
            data-plasmic-override={overrides.myNavBar}
            className={classNames("__wab_instance", sty.myNavBar)}
          />

          <AntdModal
            data-plasmic-name={"modal"}
            data-plasmic-override={overrides.modal}
            cancelText={" "}
            className={classNames("__wab_instance", sty.modal)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens
            )}
            footer={
              <AntdButton
                className={classNames("__wab_instance", sty.button__xnUhQ)}
                danger={false}
                disabled={false}
                ghost={true}
                loading={false}
                onClick={async () => {
                  const $steps = {};

                  $steps["updateModalOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modal", "open"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalOpen"] != null &&
                    typeof $steps["updateModalOpen"] === "object" &&
                    typeof $steps["updateModalOpen"].then === "function"
                  ) {
                    $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                  }
                }}
                shape={"default"}
                size={"medium"}
                submitsForm={false}
                type={"primary"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ecnVq
                  )}
                >
                  {"Close"}
                </div>
              </AntdButton>
            }
            hideFooter={false}
            modalScopeClassName={sty["modal__modal"]}
            okText={"Close"}
            onOpenChange={generateStateOnChangeProp($state, ["modal", "open"])}
            open={generateStateValueProp($state, ["modal", "open"])}
            title={"Like my content?"}
            trigger={
              <AntdButton
                className={classNames("__wab_instance", sty.button__xCevC)}
                ghost={false}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__o3Z22
                  )}
                >
                  {"Show modal"}
                </div>
              </AntdButton>
            }
          >
            <div className={classNames(projectcss.all, sty.freeBox__rP6)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9RfBb
                )}
              >
                {"Sign up and stay up to date with new releases!"}
              </div>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.form),
                  extendedOnValuesChange:
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["form", "value"],
                      FormWrapper_Helpers
                    ),
                  formItems: [
                    { label: "Name", name: "name", inputType: "Text" },
                    {
                      label: "Message",
                      name: "message",
                      inputType: "Text Area"
                    }
                  ],
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: "advanced",
                  onFinish: async values => {
                    const $steps = {};

                    $steps["zapierTrigger"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "g7JX2rWdVDtqZD2z5um8yp",
                              opId: "8d845f59-bf38-4c41-8a6b-7249821fdf76",
                              userArgs: {
                                body: [$state.form.value]
                              },
                              cacheKey: null,
                              invalidatedKeys: ["plasmic_refresh_all"],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["zapierTrigger"] != null &&
                      typeof $steps["zapierTrigger"] === "object" &&
                      typeof $steps["zapierTrigger"].then === "function"
                    ) {
                      $steps["zapierTrigger"] = await $steps["zapierTrigger"];
                    }
                  },
                  onIsSubmittingChange:
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "isSubmitting",
                      ["form", "isSubmitting"],
                      FormWrapper_Helpers
                    ),
                  ref: ref => {
                    $refs["form"] = ref;
                  },
                  submitSlot: null,
                  wrapperCol: { span: 16, horizontalOnly: true }
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "form.value"
                    },
                    {
                      name: "isSubmitting",
                      plasmicStateName: "form.isSubmitting"
                    }
                  ],
                  [],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <FormWrapper
                    data-plasmic-name={"form"}
                    data-plasmic-override={overrides.form}
                    {...child$Props}
                  >
                    <FormItemWrapper
                      data-plasmic-name={"formField"}
                      data-plasmic-override={overrides.formField}
                      className={classNames("__wab_instance", sty.formField)}
                      label={"Email"}
                      name={"email"}
                      rules={[
                        {
                          ruleType: "required",
                          message: "Email field is required"
                        }
                      ]}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input", "value"],
                            AntdInput_Helpers
                          ),
                          value: generateStateValueProp($state, [
                            "input",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input"}
                            data-plasmic-override={overrides.input}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__hemei
                      )}
                      danger={false}
                      ghost={false}
                      loading={false}
                      shape={"default"}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fV19V
                        )}
                      >
                        {"Submit"}
                      </div>
                    </AntdButton>
                  </FormWrapper>
                );
              })()}
            </div>
          </AntdModal>
          <CmsQueryRepeater
            data-plasmic-name={"cmsDataFetcher"}
            data-plasmic-override={overrides.cmsDataFetcher}
            className={classNames("__wab_instance", sty.cmsDataFetcher)}
            desc={false}
            emptyMessage={
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___72Hw
                    )}
                  >
                    {"No matching published entries found."}
                  </div>
                )}
              </DataCtxReader__>
            }
            filterField={"title"}
            filterValue={(() => {
              try {
                return $ctx.params.slug;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            forceEmptyState={false}
            forceLoadingState={false}
            limit={0}
            loadingMessage={
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__o4XWe
                    )}
                  >
                    {"Loading..."}
                  </div>
                )}
              </DataCtxReader__>
            }
            mode={"rows"}
            noAutoRepeat={false}
            noLayout={false}
            useDraft={false}
          >
            <DataCtxReader__>
              {$ctx => (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__aqNc)}
                >
                  <AntdBreadcrumb
                    data-plasmic-name={"breadcrumb"}
                    data-plasmic-override={overrides.breadcrumb}
                    className={classNames("__wab_instance", sty.breadcrumb)}
                    itemsRaw={
                      <React.Fragment>
                        <AntdBreadcrumbItem
                          className={classNames(
                            "__wab_instance",
                            sty.breadcrumbItem__pni6C
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rOQ5
                            )}
                          >
                            {"Stories"}
                          </div>
                        </AntdBreadcrumbItem>
                        <AntdBreadcrumbItem
                          className={classNames(
                            "__wab_instance",
                            sty.breadcrumbItem__i0XVp
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fOXzr
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.params.slug;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Second";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </AntdBreadcrumbItem>
                      </React.Fragment>
                    }
                    separator={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kodjp
                        )}
                      >
                        {"/"}
                      </div>
                    }
                  />

                  <CmsRowField
                    className={classNames(
                      "__wab_instance",
                      sty.cmsEntryField__hSwDp
                    )}
                    themeResetClassName={classNames(
                      projectcss.root_reset,
                      projectcss.root_reset_tags,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens
                    )}
                  />

                  <CmsRowField
                    className={classNames(
                      "__wab_instance",
                      sty.cmsEntryField__rfa9V
                    )}
                    dateFormat={"MMMM D, YYYY"}
                    field={"date"}
                    themeResetClassName={classNames(
                      projectcss.root_reset,
                      projectcss.root_reset_tags,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens
                    )}
                  />

                  <CmsRowField
                    className={classNames(
                      "__wab_instance",
                      sty.cmsEntryField__csM7D
                    )}
                    field={"body"}
                    themeResetClassName={classNames(
                      projectcss.root_reset,
                      projectcss.root_reset_tags,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens
                    )}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__pbLhf)}
                  >
                    <CmsRowField
                      className={classNames(
                        "__wab_instance",
                        sty.cmsEntryField__ykXt9
                      )}
                      field={"notes"}
                      themeResetClassName={classNames(
                        projectcss.root_reset,
                        projectcss.root_reset_tags,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens
                      )}
                    />
                  </div>
                </Stack__>
              )}
            </DataCtxReader__>
          </CmsQueryRepeater>
          <Tooltip
            data-plasmic-name={"tooltip"}
            data-plasmic-override={overrides.tooltip}
            className={classNames("__wab_instance", sty.tooltip)}
            tooltip={"Sign up to my newsletter"}
          >
            <IconButton
              data-plasmic-name={"iconButton"}
              data-plasmic-override={overrides.iconButton}
              className={classNames("__wab_instance", sty.iconButton)}
              onClick={async event => {
                const $steps = {};

                $steps["updateModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modal", "open"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModalOpen"] != null &&
                  typeof $steps["updateModalOpen"] === "object" &&
                  typeof $steps["updateModalOpen"].then === "function"
                ) {
                  $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                }
              }}
            />
          </Tooltip>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "myNavBar",
    "modal",
    "form",
    "formField",
    "input",
    "cmsDataFetcher",
    "breadcrumb",
    "tooltip",
    "iconButton"
  ],
  myNavBar: ["myNavBar"],
  modal: ["modal", "form", "formField", "input"],
  form: ["form", "formField", "input"],
  formField: ["formField", "input"],
  input: ["input"],
  cmsDataFetcher: ["cmsDataFetcher", "breadcrumb"],
  breadcrumb: ["breadcrumb"],
  tooltip: ["tooltip", "iconButton"],
  iconButton: ["iconButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  myNavBar: typeof MyNavBar;
  modal: typeof AntdModal;
  form: typeof FormWrapper;
  formField: typeof FormItemWrapper;
  input: typeof AntdInput;
  cmsDataFetcher: typeof CmsQueryRepeater;
  breadcrumb: typeof AntdBreadcrumb;
  tooltip: typeof Tooltip;
  iconButton: typeof IconButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStory__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStory__VariantsArgs;
    args?: PlasmicStory__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStory__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicStory__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStory__ArgProps,
          internalVariantPropNames: PlasmicStory__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStory__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStory";
  } else {
    func.displayName = `PlasmicStory.${nodeName}`;
  }
  return func;
}

export const PlasmicStory = Object.assign(
  // Top-level PlasmicStory renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    myNavBar: makeNodeComponent("myNavBar"),
    modal: makeNodeComponent("modal"),
    form: makeNodeComponent("form"),
    formField: makeNodeComponent("formField"),
    input: makeNodeComponent("input"),
    cmsDataFetcher: makeNodeComponent("cmsDataFetcher"),
    breadcrumb: makeNodeComponent("breadcrumb"),
    tooltip: makeNodeComponent("tooltip"),
    iconButton: makeNodeComponent("iconButton"),

    // Metadata about props expected for PlasmicStory
    internalVariantProps: PlasmicStory__VariantProps,
    internalArgProps: PlasmicStory__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicStory;
/* prettier-ignore-end */
