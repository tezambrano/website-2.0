// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8heT1pgrgbecLEwTnEku1h
// Component: O8PGGcLGVzNr

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import CountdownNumber from "../../CountdownNumber"; // plasmic-import: hSDUh1u_5M6A/component
import { Timer } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 8heT1pgrgbecLEwTnEku1h/projectcss
import sty from "./PlasmicCountdown.module.css"; // plasmic-import: O8PGGcLGVzNr/css

createPlasmicElementProxy;

export type PlasmicCountdown__VariantMembers = {};
export type PlasmicCountdown__VariantsArgs = {};
type VariantPropType = keyof PlasmicCountdown__VariantsArgs;
export const PlasmicCountdown__VariantProps = new Array<VariantPropType>();

export type PlasmicCountdown__ArgsType = {
  targetTimeUtc?: string;
};
type ArgPropType = keyof PlasmicCountdown__ArgsType;
export const PlasmicCountdown__ArgProps = new Array<ArgPropType>(
  "targetTimeUtc"
);

export type PlasmicCountdown__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  timer?: Flex__<typeof Timer>;
};

export interface DefaultCountdownProps {
  targetTimeUtc?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCountdown__RenderFunc(props: {
  variants: PlasmicCountdown__VariantsArgs;
  args: PlasmicCountdown__ArgsType;
  overrides: PlasmicCountdown__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          targetTimeUtc: "2025-12-10T23:26:25.224Z"
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "remainingSeconds",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <CountdownNumber
          className={classNames("__wab_instance", sty.countdownNumber__eOwmj)}
          number={
            <React.Fragment>
              {(() => {
                try {
                  return Math.floor($state.remainingSeconds / 60 / 60 / 24);
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "42";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          }
          unit={"Days"}
        />

        <CountdownNumber
          className={classNames("__wab_instance", sty.countdownNumber__qMXzn)}
          number={
            <React.Fragment>
              {(() => {
                try {
                  return Math.floor($state.remainingSeconds / 60 / 60) % 24;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "42";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          }
          unit={"Hours"}
        />

        <CountdownNumber
          className={classNames("__wab_instance", sty.countdownNumber__jWoJ)}
          number={
            <React.Fragment>
              {(() => {
                try {
                  return Math.floor($state.remainingSeconds / 60) % 60;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "42";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          }
          unit={"Minutes"}
        />

        <CountdownNumber
          className={classNames("__wab_instance", sty.countdownNumber___2XKo3)}
          number={
            <React.Fragment>
              {(() => {
                try {
                  return $state.remainingSeconds % 60;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "42";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          }
          unit={"Seconds"}
        />
      </Stack__>
      <Timer
        data-plasmic-name={"timer"}
        data-plasmic-override={overrides.timer}
        className={classNames("__wab_instance", sty.timer)}
        intervalSeconds={1}
        isRunning={true}
        runWhileEditing={true}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "timer"],
  freeBox: ["freeBox"],
  timer: ["timer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  timer: typeof Timer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCountdown__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCountdown__VariantsArgs;
    args?: PlasmicCountdown__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCountdown__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCountdown__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCountdown__ArgProps,
          internalVariantPropNames: PlasmicCountdown__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCountdown__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCountdown";
  } else {
    func.displayName = `PlasmicCountdown.${nodeName}`;
  }
  return func;
}

export const PlasmicCountdown = Object.assign(
  // Top-level PlasmicCountdown renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    timer: makeNodeComponent("timer"),

    // Metadata about props expected for PlasmicCountdown
    internalVariantProps: PlasmicCountdown__VariantProps,
    internalArgProps: PlasmicCountdown__ArgProps
  }
);

export default PlasmicCountdown;
/* prettier-ignore-end */
